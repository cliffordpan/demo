name: deploy-master-to-k8s

on:
  push:
    branches:
      - master

jobs:
  build:
    name:  build
    runs-on: ubuntu-latest
    steps:
#      - name: Extract branch name
#        shell: bash
#        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
#        id: extract_branch
      - uses: actions/checkout@v4
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '17'
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Login registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build
        uses: gradle/gradle-build-action@v3
      - name: Cache Gradle Packages
        uses: actions/cache@v4
        with:
          path:
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Build
        run: ./gradlew bootJar -x test --refresh-dependencies --scan
      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          push: true
          tags: '${{ secrets.REGISTRY }}/demo/backend:latest'

          # harbor bug??
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
#      - name: Extract branch name
#        shell: bash
#        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
#        id: extract_branch
      - name: Trigger Jenkins
        shell: bash
        run: |
          curl -I -u ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} "https://${{ secrets.JENKINS_URL }}/job/demo-fe/buildWithParameters?token=${{ secrets.DEPLOYMENT_TOKEN }}&APP_NAME=${{ vars.APP_NAME }}&NS=${{ vars.NS }}"
#          cache-from: 'type=registry,ref=${{ secrets.REGISTRY }}/demo/backend:cache'
#          cache-to: 'type=registry,ref=${{ secrets.REGISTRY }}/demo/backend:cache,mode=max'
#      - name: Config AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
#          aws-region: "us-west-2"
#      - name: Upload to S3
#        run: aws s3 cp ./build/libs/example-boot.jar s3://eb-s3-deploy/
#      - name: Create ElasticBeanstalk Version
#        run: |
#          aws elasticbeanstalk create-application-version \
#          --application-name demo-backend \
#          --source-bundle S3Bucket="eb-s3-deploy",S3Key="example-boot.jar" \
#          --version-label "ver-${{ github.sha }}"
#      - name: Deploy New Version
#        run: |
#          aws elasticbeanstalk update-environment --environment-name demo-backend-env --version-label "ver-${{ github.sha }}"